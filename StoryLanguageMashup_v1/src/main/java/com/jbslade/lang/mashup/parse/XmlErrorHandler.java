package com.jbslade.lang.mashup.parse;

import com.jbslade.lang.mashup.debug.MyLogger;

import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * Created by Justin on 10/5/13.
 */
public class XmlErrorHandler implements ErrorHandler
{
    /*
     * Warnings, too, are ignored by default. It is not illegal, and it does not cause problems, but it is something you
	 * might like to know about because it might not have been intentional.
	 */
    @Override
    public void warning(SAXParseException spe) throws SAXException
    {
        MyLogger.logWarning(XmlErrorHandler.class.getName(), "warning",
                "Warning: " + this.getParseExceptionInfo(spe));
    }

    /*
     * A nonfatal error occurs when an XML document fails a validity constraint. Such errors are generated by a validating
     * parser (given schema) when a document has an invalid tag, when a tag is found where it is not allowed, or when the
     * element contains invalid data.
     *
     * The most important principle to understand about nonfatal errors is that they are ignored by default. But if a
     * validation error occurs in a document, you probably do not want to continue processing it. You probably want to treat
     * such errors as fatal (which is what we do here by throwing the exception).
     */
    @Override
    public void error(SAXParseException spe) throws SAXException
    {
        String message = "Error: " + getParseExceptionInfo(spe);
        throw new SAXException(message);
    }

    /*
     * When a fatal error occurs, the parser cannot continue. So if the application does not generate an exception, then the
     * default error-event handler generates one. We generate our own exception here.
     */
    @Override
    public void fatalError(SAXParseException spe) throws SAXException
    {
        String message = "Fatal Error: " + getParseExceptionInfo(spe);
        throw new SAXException(message);
    }

    /*
     * Obtains the line number at which the error occurs in the XML document and the identifier of the system on which it is
     * running.
     */
    private String getParseExceptionInfo(SAXParseException spe)
    {
        String systemId = spe.getSystemId();

        if (systemId == null)
        {
            systemId = "null";
        }

        String info = "URI=" + systemId + " \n\t\t\t: Line=" + spe.getLineNumber() + ": " +
                spe.getMessage();

        return info;
    }
}
